{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState } from \"react\";\nimport Layout from \"../components/Layout\";\nimport BankList from \"../Data/BankList\";\nimport ChooseProfile from \"../components/Register/chooseProfile\";\nimport PersonalReg from \"../components/Register/PersonalReg\";\nimport CompanyReg from \"../components/Register/CompanyReg\";\nconst emailRegex = RegExp(/^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/);\nconst phoneRegex = RegExp(/^[0-9\\b]+$/);\n\nconst Register = props => {\n  const {\n    0: isAccountSelect,\n    1: setIsAccountSelect\n  } = useState(false);\n  const {\n    0: profile,\n    1: setProfile\n  } = useState(\"\");\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    firstName: \"\",\n    secondName: \"\",\n    lastName: \"\",\n    password: \"\",\n    passwordConfirm: \"\",\n    birthDate: \"\",\n    email: \"\",\n    phone: \"\",\n    nationality: \"Afghanistan\",\n    doctype: \"DNI\",\n    dni: \"\",\n    motherLastName: \"\",\n    bankName: \"BCP\",\n    nickname: \"\",\n    accountNumber: \"\",\n    type: BankList[0],\n    accountType: \"Personal\",\n    currency: \"Soles\",\n    profile: \"\",\n    formErrors: {\n      firstName: \"\",\n      secondName: \"\",\n      passwordConfirm: \"\",\n      lastName: \"\",\n      password: \"\",\n      birthDate: \"\",\n      email: \"\",\n      phone: \"\",\n      nationality: \"\",\n      dni: \"\",\n      doctype: \"\",\n      motherLastName: \"\",\n      bankName: \"\",\n      nickname: \"\",\n      accountNumber: \"\",\n      type: \"\",\n      currency: \"\"\n    }\n  });\n\n  const handleChange = input => event => {\n    const {\n      value\n    } = event.target;\n    setState(_objectSpread(_objectSpread({}, state), {}, {\n      [input]: value\n    }));\n  };\n\n  const {\n    step,\n    formErrors\n  } = state;\n  const {\n    firstName,\n    secondName,\n    lastName,\n    password,\n    passwordConfirm,\n    birthDate,\n    email,\n    phone,\n    nationality,\n    motherLastName,\n    dni,\n    accountType,\n    doctype\n  } = state;\n  const values = {\n    firstName,\n    secondName,\n    lastName,\n    password,\n    passwordConfirm,\n    birthDate,\n    email,\n    phone,\n    nationality,\n    motherLastName,\n    dni,\n    accountType,\n    doctype\n  }; // if (isAccountSelect === false) {\n  //   return (\n  //     <Layout>\n  //       <ChooseProfile\n  //         setIsAccountSelect={setIsAccountSelect}\n  //         setProfile={setProfile}\n  //       />\n  //     </Layout>\n  //   );\n  // }\n\n  return __jsx(React.Fragment, null, __jsx(Layout, null, __jsx(\"div\", {\n    className: \"page\",\n    id: \"top\"\n  }, __jsx(PersonalReg, {\n    handleChange: handleChange,\n    values: values,\n    formErrors: formErrors,\n    profile: profile\n  }))));\n};\n\nexport default Register;","map":{"version":3,"sources":["E:/work/next-express/client/pages/register.js"],"names":["React","useState","Layout","BankList","ChooseProfile","PersonalReg","CompanyReg","emailRegex","RegExp","phoneRegex","Register","props","isAccountSelect","setIsAccountSelect","profile","setProfile","state","setState","firstName","secondName","lastName","password","passwordConfirm","birthDate","email","phone","nationality","doctype","dni","motherLastName","bankName","nickname","accountNumber","type","accountType","currency","formErrors","handleChange","input","event","value","target","step","values"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Layout from \"../components/Layout\";\nimport BankList from \"../Data/BankList\";\nimport ChooseProfile from \"../components/Register/chooseProfile\";\nimport PersonalReg from \"../components/Register/PersonalReg\";\nimport CompanyReg from \"../components/Register/CompanyReg\";\n\nconst emailRegex = RegExp(\n  /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n);\n\nconst phoneRegex = RegExp(/^[0-9\\b]+$/);\n\nconst Register = (props) => {\n  const [isAccountSelect, setIsAccountSelect] = useState(false);\n  const [profile, setProfile] = useState(\"\");\n\n  const [state, setState] = useState({\n    firstName: \"\",\n    secondName: \"\",\n    lastName: \"\",\n    password: \"\",\n    passwordConfirm: \"\",\n    birthDate: \"\",\n    email: \"\",\n    phone: \"\",\n    nationality: \"Afghanistan\",\n    doctype: \"DNI\",\n    dni: \"\",\n    motherLastName: \"\",\n    bankName: \"BCP\",\n    nickname: \"\",\n    accountNumber: \"\",\n    type: BankList[0],\n    accountType: \"Personal\",\n    currency: \"Soles\",\n    profile: \"\",\n\n    formErrors: {\n      firstName: \"\",\n      secondName: \"\",\n      passwordConfirm: \"\",\n      lastName: \"\",\n      password: \"\",\n      birthDate: \"\",\n      email: \"\",\n      phone: \"\",\n      nationality: \"\",\n      dni: \"\",\n      doctype: \"\",\n      motherLastName: \"\",\n      bankName: \"\",\n      nickname: \"\",\n      accountNumber: \"\",\n      type: \"\",\n      currency: \"\",\n    },\n  });\n\n  const handleChange = (input) => (event) => {\n    const { value } = event.target;\n    setState({ ...state, [input]: value });\n  };\n\n  const { step, formErrors } = state;\n  const {\n    firstName,\n    secondName,\n    lastName,\n    password,\n    passwordConfirm,\n    birthDate,\n    email,\n    phone,\n    nationality,\n    motherLastName,\n    dni,\n    accountType,\n    doctype,\n  } = state;\n  const values = {\n    firstName,\n    secondName,\n    lastName,\n    password,\n    passwordConfirm,\n    birthDate,\n    email,\n    phone,\n    nationality,\n    motherLastName,\n    dni,\n    accountType,\n    doctype,\n  };\n\n  // if (isAccountSelect === false) {\n  //   return (\n  //     <Layout>\n  //       <ChooseProfile\n  //         setIsAccountSelect={setIsAccountSelect}\n  //         setProfile={setProfile}\n  //       />\n  //     </Layout>\n  //   );\n  // }\n\n  return (\n    <>\n      <Layout>\n        <div className=\"page\" id=\"top\">\n          <PersonalReg\n            handleChange={handleChange}\n            values={values}\n            formErrors={formErrors}\n            profile={profile}\n          />\n        </div>\n      </Layout>\n    </>\n  );\n};\n\nexport default Register;\n"]},"metadata":{},"sourceType":"module"}